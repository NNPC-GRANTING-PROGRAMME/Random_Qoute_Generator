<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>typing</title>
 <link rel="preconnect" href="https://fonts.googleapis.com">
     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Lobster&family=Rubik+Doodle+Shadow&display=swap" rel="stylesheet">  
  <style>
  *{
    position: relative;
    box-sizing: border-box;
    color: #ffeecc;
    font-family: Verdana, Geneva, Tahoma, sans-serif;
  }
  body{
    width: 100vw;
    height: 100vh;
    background: linear-gradient(135deg, #ff7e5f, #feb47b); 
    margin: 0;
    padding: 0;
  }
  .title{
    font-size: 3rem;
    text-shadow: -3px -3px 1px rgba(255,255,255,0.7);
    font-weight: bold;
    font-family: lobster;
    color: #ff5e5f;
    opacity: 0;
    -webkit-text-stroke: 1px black;
    animation: 2s 0s slideDown forwards;
    margin: 20px;
    top: 10px;
  }
  footer{
    overflow-y: hidden;
  }
  @keyframes slideDown{
    from{
      opacity: 0;
    }
    to{
      opacity: 1;
      letter-spacing: 2px;
    }
  }
  .title_details{
    animation: large .5s 1s forwards;
   font-weight: thin;
    font-size: 1rem;
    width: 310px;
    margin-top: 2em;
    transform: scale(0)
  }
  @keyframes large{
    from{
      transform: scale(0);
    }to{
      transform: scale(1);
    }
  }
  .tool{
    font-size: 1.5rem;
   
    margin: 1.5em;
    font-family: lobster;
    font-weight: bold;
   -webkit-text-stroke: 1px red;
  }
  .greet{
    font-size: 1.5rem;
    margin: .6em;
    margin-top: 3em;
    font-family: lobster;
    font-weight: thin;
    animation: slideCome .5s .5s forwards;
    left: -300px;
  }
  @keyframes slideCome{
    from{
      left: -300px;
    }to{
      left: 0px;
    }
  }
  .con1{
    transform-origin: left;
    animation: rotLeft .5s 1.5s forwards;
    transform: rotateY(-90deg);
 
  }
  @keyframes rotLeft{
    from{
      transform: rotateY(-90deg);
    }
    to{
      transform: rotateY(0deg);
    }
  }
  .con2{
    transform-origin: right;
    animation: rotRight .5s 2s forwards;
    transform: rotateY(90deg);
  }
  @keyframes rotRight{
    from{
      transform: rotateY(90deg);
    }
    to{
      transform: rotateY(0deg);
    }
  }
  .con3{
 transform: translateY(500px);
    animation:slideUp .5s 2.5s forwards;
    
  }
  @keyframes slideUp{
    from{
      transform: translateY(500px);
  
    
    }
    to{
      transform: translateY(0px);
  
     
    }
  }
  button{
    background: #ff4e33;
    color: white;
    padding: 5px;
    border: none;
   border-radius: 10px;
  }
  button:active{
      animation: clickStyle .2s 0s forwards;
  }
  button:hover{
    background: red;
    border: 1px solid white;
  
  }
  @keyframes clickStyle{
    from{
      transform: scale(0.8);
    }to{
      transform: scale(1);
    }
  }
  .typer{
    width: 90%;
    min-height: 150px;
    max-height: auto;
    border: 1px solid white;
    box-shadow: 1px 1px 5px black,-1px -1px 5px black;
    margin-top: 3em;
    border-radius: 15px;
    margin-bottom: 1em;
    padding: 5px;
    background: white;
  }
  .qoute{
    color: red;
  }
  .start{
    width: 80%;
    height: 50px;
    font-size: 1rem;
    margin: .5em;
  }
  #copy{
    position: absolute;
  bottom: 2px;
  text-align: center;
  left: 120px;
  margin: 0;
  display: none;
  }
  img{
    display: inline;
    width: 40px;
    height: 40px;
   
  }
  .contact,.review{
    font-size: 1.5rem;
    margin: .6em;
    margin-top: 3em;
    font-family: lobster;
    font-weight: thin;
  }
  ul{
    list-style-type: none;
    display: flex;
    width: 80%;
    justify-content:space-evenly;
    left: -15px;
    position: absolute
    bottom: 10%;
  }
  #rev{
    width: 90%;
    min-height: 140px;
    max-height: auto;
    border: 1px solid white;
    border-radius: 15px;
    margin-top: 3em;
    margin-bottom: 1em;
    padding: 5px;
    color: #ff2e33;
  }
  #rev::placeholder{
    margin: 3px;
    color: #ff4e33;
    font-size: 1em;
    text-align: left;
  }
  #rev:focus{
    outline: none;
  }
  #sub{
    width: 50%;
    padding: 5px;
    height: 40px;
  }
  #loading{
    position: relative;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: transparent;
    animation:rotate .5s 0s infinite ease-out;
    left: 45%;
    border-top: 3px solid white;
  }
  @keyframes rotate{
    from{
      transform: rotateZ(0deg);
    }
    to{
      transform: rotateZ(360deg);
    }
  }
  .alert{
    width: 100%;
    height: 40px;
    position: fixed;
    top: 0;
    background: red;
    padding: 8px;
    font-size: 1.2rem;
    font-weight: thin;
    transform: scaleX(0);
    animation: null 7s .3s forwards;
    z-index: 100;
  }
  @keyframes yesAlert{
    0%{
      transform: scaleX(0);
    }
    3%,100%{
      transform: scaleX(1);
    }
  }
  @keyframes noAlert{
    0%{
      transform: scaleX(1);
    }
    2%,100%{
      transform: scaleX(0);
    }
  }
  </style>
</head>
<body>
  <center>
 <header>
   <div class="alert">hello</div>
   <div class="title">STECH DEVS</div>
   <div class="greet">Good morning!</div>
   <div class="title_details">i am <span class="age">16 year</span>
   beginner front end developer with <span class="startTime"> 4month </span> start apart, welcome to my first project where i design auto qoute generator
  a tool that help and provide people with random
   qoute for courages, education etc...</div>
    

 </header>
 <main>
     <div class="con1">
    <div class="tool">Random Qoute Generator</div>

 <div class="typer">
    <span class="qoute">click generate to get qoute</span>
    <button id="copy">copy qoute</button>
   
  </div>
       <button class="start" onclick="start()">Generate Qoute</button>
 </div>
  <footer>
    <div class="con2">
    <div class="review">please live a review</div>
    <form action="https://formspree.io/f/xyyrdble" method="POST">
   <textarea name="message" id="rev" placeholder="eg  
   absolutely amazing, wow,
   it looks better when you change site theme,
   add option to remove  typing effect,
   copy button not showing,
   add option to choose type of qoute eg educational etc....
   we need your feedback to improve our site"
    cols="20" rows="10"></textarea>
    <button type="submit" onclick="isValid" id="sub">submit feedback</button>
  </form>
  </div>
    </div>
    
  <div class="con3">
    <div class="contact">Contact us</div><br>
    <ul>
      <li><a target="_blank" href="https://www.facebook.com/profile.php?id=100085838598957">
        <img src="./images/fb.png" alt="facebook logo">
       </a></li>
      <li><a target="_blank" href="https://wa.me/09131458740">
        <img src="./images/wa.png" alt="whasapp logo">
       </a></li>
      <li><a target="_blank" href="d">
        <img src="./images/git.png" alt="github logo">
       </a></li>
    </ul>
    </div>
      </footer>
  </center>
  <script>
  
let quoteField = document.querySelector('.qoute');
let genQuote = document.querySelector('.start');
let isTyping = false;
let greet = document.querySelector('.greet');
let myAge = document.querySelector('.age');
let startTime = document.querySelector('.startTime');
let cookie = document.cookie;
let feedBackContainer = document.querySelector('.con2')
let Alert = document.querySelector('.alert');
let feedBackBtn = document.getElementById('sub');
let copy = document.querySelector('#copy');

const date = new Date();

function getGreeting() {
    let hour = date.getHours();
    if (hour < 12) {
        return 'Good morning';
    } else if (hour >= 12 && hour < 19) {
        return 'Good afternoon';
    } else {
        return 'Good evening';
    }
}


greet.textContent = getGreeting();


 function getAge(){
   let [Day, Month, Year] = [26, 9, 2007];
   let [Cday, Cmonth, Cyear] = [date.getDate(), date.getMonth() + 1, date.getFullYear()];
   
   if (Cmonth > Month || (Cmonth === Month && Cday >= Day)) {
       return Cyear - Year;
   } else {
       return Cyear - Year - 1;
   }
}

myAge.textContent = getAge() + ' years old';

 function getTimeSpend() {
   let [day, month, year] = [21, 11, 2023];
   let date = new Date();
   let [Day, Month, Year] = [date.getDate(), date.getMonth() + 1, date.getFullYear()];
   let monthsSpent = 0;

   while (year < Year || (year === Year && month < Month)) {
       monthsSpent++;
       if (month === 12) {
           month = 1;
           year++;
       } else {
           month++;
       }
   }

   if (monthsSpent >= 12) {
       let years = Math.floor(monthsSpent / 12);
       let remainingMonths = monthsSpent % 12;
       return years + ' years ' + remainingMonths + ' months';
   } else {
       return monthsSpent + ' months';
   }
}

startTime.textContent = getTimeSpend();

 function AlertUser(char, color) {
    Alert.textContent = "⚠️ " + char;
    Alert.style.backgroundColor = color;
    Alert.style.animationName = 'yesAlert';
    Alert.style.color = 'white';
  
    setTimeout(() => {
        Alert.style.animationName = 'noAlert';
    },1000);
}

  
async function getQuote() {
  try {
    const response = await fetch('https://api.quotable.io/random');
    const data = await response.json();
    const quote = data.content;
    return [quote, true];
  } catch (error) {
    return ['Courage quote not available at the moment. Please try again later. if issue persist check your internet connection or live a feedback', false];
  }
}

async function start(){
  if(!isTyping){
    genQuote.innerHTML = '<div id="loading"></div>';
    let [quote, isQuoteAvailable] = await getQuote();
    let typingSpeed = Math.floor(Math.random() * (80 - 30) + 30);
    let index = 0;
    controlCopy(false,'')
  
    let errTimer = setTimeout(() => {
      if(quote.trim() === ''){
        clearTimeout(errTimer);
        quote = 'an unexpected error occur due to some technical reasons try again later'
        genQuote.innerHTML = 'GenerateCode';
        isTyping = false;
      }
    },5000);

    quoteField.innerHTML = '';

    let timer = setInterval(() => {
      if (index < quote.length) {
        quoteField.innerHTML += quote.charAt(index);
        index++;
        isTyping = true;
      } else {
        clearInterval(timer);
        genQuote.innerHTML = 'Generate Quote';
        isTyping = false;
        if(isQuoteAvailable){
          controlCopy(true, quote); 
         
        } else {
          controlCopy(false, qoute);
        }
      }
    }, typingSpeed);
  } else {
    AlertUser('cannot generate on generation');
  }
}

function controlCopy(isAvai, quote) {
  if(isAvai){
    copy.style.display = 'block';
    copy.onclick = () => { 
      try{
      navigator.clipboard.writeText(quote)
      AlertUser('qoute copied successfully ','green');
 
      }catch(err){
        AlertUser('cannot copy qoute error occured ','red');
      }
    };

  }else {
    copy.style.display = 'none';
  }
}




const twoDaysInSeconds = 2 * 24 * 60 * 60; // 2 days in seconds
const expiryDate = new Date(Date.now() + twoDaysInSeconds * 1000).toUTCString();
document.cookie = `feedBack=true; expires=${expiryDate}`;


controlFeedCon();



feedBackBtn.addEventListener('click', async (eve) => {
    eve.preventDefault(); 

  
    feedbackText = feedBackContainer.querySelector('textarea').value.trim();
    if (feedbackText === '') {
        AlertUser('You must enter a text', 'red');
        return;
    }

  
    AlertUser('Thanks for giving us feedback', 'green');

  
    setTimeout(controlFeedCon, 1000);
});

function controlFeedCon() {
    function isThereFeedBack() {
        return document.cookie.split('=')[1] === 'true';
    }

    if (isThereFeedBack()) {
        feedBackContainer.style.display = 'none';
    } else {
        feedBackContainer.style.display = 'block';
    }
}


  </script>
</body> 

</html>